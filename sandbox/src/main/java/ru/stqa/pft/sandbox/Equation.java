package ru.stqa.pft.sandbox;

public class Equation {

    private double a;
    private double b;
    private double c;

    private int n; // количество корней квадратного уравнения

    public Equation(double a, double b, double c) {

        this.a = a;
        this.b = b;
        this.c = c;

        double d = b * b - 4 * a * c;

        if (a != 0) {
            if (d > 0) {
                n = 2;
            } else if (d == 0) { //визуально эффект того, что все условия находятся на одном уровне
                n = 1;
            } else {
                n = 0;
            }
        } else if (b != 0) {
            n = 1;
        } else if (c != 0) {
            n = 0;
        } else {
            n = -1; //на самом деле бесконечное множество решений
        }



        /* условие ветвления выше можно записать как несколько отдельных проверок,
        если уловия проверок будут взаимоисключающими
        результат ветвления будет абсолютно эквивалентен следующим трем проверкам, т.к. они
        взаимоисключают друг друга:
        * if (d > 0) {
            n = 2;
        }
        * if (d == 0) {
            n = 1;
        }
        * if (d < 0) {
            n = 0;
        }
        но с точки зрения производительности такой вариант хуже
        * */

        if (a == 0) {
            System.out.println("Это вырожденное уравнение");
        } // фигурные скобки можно не ставить, но это не рекомендуется

    }


    public int rootNumber() {
        return n;
    }

}



